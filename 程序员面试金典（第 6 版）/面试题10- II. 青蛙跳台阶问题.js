/**
 * 一只青蛙一次可以跳上1级台阶，也可以跳上2级台阶。求该青蛙跳上一个 n 级的台阶总共有多少种跳法。
 * 答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。
 */

/**
* @param {number} n
* @return {number}
*/
/**
 * 动态规划
 * 状态转移方程：
 * 对于这道题，由于情况可以选择跳一级，也可以选择跳两级，所以青蛙到达第 n 级的台阶有两种方式
 * 一种是从第 n-1 级跳上来
 * 一种是从第 n-2 级跳上来
 * 由于我们是要算所有可能的跳法的，所以有 dp[n] = dp[n-1] + dp[n-2]。
 * 如何跳 从第n-1级跳上来 从第n-2级跳上来 注意不需要+1 不是求跳多少级
 * 我们就两种跳法 从第几级跳上来 明白这个状态
 */
var numWays = function (n) {
    let dp = new Array() // 定义dpTabel
    // 初始化值
    dp[0] = 1
    dp[1] = 1
    for (let i = 2; i <= n; i++) {
        // 状态转移方程
        // dp[n]=x 表示跳上第n寄台阶有x种跳法
        dp[i] = (dp[i - 1] + dp[i - 2]) % 1000000007
    }
    return dp[n]
};